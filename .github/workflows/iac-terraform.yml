name: IaC - Terraform (Azure)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'infra/**'
      - '**/*.tf'
      - 'environments/**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - 'infra/**'
      - '**/*.tf'
      - 'environments/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Choose action: plan, apply, or destroy'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

jobs:
  terraform:
    name: Terraform plan / apply
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash

    env:
      TF_WORKING_DIR: infra
      BACKEND_RG: ${{ secrets.BACKEND_RG }}
      BACKEND_STORAGE_ACCOUNT: ${{ secrets.BACKEND_STORAGE_ACCOUNT }}
      BACKEND_CONTAINER: ${{ secrets.BACKEND_CONTAINER }}
      BACKEND_LOCATION: ${{ secrets.BACKEND_LOCATION || 'eastus' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine environment and action
        id: env-action
        run: |
          # Set default values
          ENVIRONMENT="dev"
          ACTION="plan"

          # For pull requests, always use dev environment and plan action
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            ENVIRONMENT="dev"
            ACTION="plan"
          # For push to main/master, determine environment from commit message
          elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            if [[ "$GITHUB_REF_NAME" == "main" || "$GITHUB_REF_NAME" == "master" ]]; then
              if git log -1 --pretty=%B | grep -q "\[prod\]"; then
                ENVIRONMENT="prod"
              elif git log -1 --pretty=%B | grep -q "\[staging\]"; then
                ENVIRONMENT="staging"
              else
                ENVIRONMENT="dev"
              fi
              ACTION="apply"
            fi
          # For manual workflow dispatch, use inputs
          elif [[ "$GITHUB_EVENT_NAME" == "workflow_dispatch" ]]; then
            ENVIRONMENT="$INPUT_ENVIRONMENT"
            ACTION="$INPUT_ACTION"
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "action=$ACTION" >> $GITHUB_OUTPUT
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          INPUT_ENVIRONMENT: ${{ inputs.environment }}
          INPUT_ACTION: ${{ inputs.action }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Ensure backend storage (optional)
        if: ${{ env.BACKEND_STORAGE_ACCOUNT != '' }}
        run: |
          echo "Creating resource group if missing: $BACKEND_RG"
          az group create -n "$BACKEND_RG" -l "$BACKEND_LOCATION" || true
          echo "Checking/creating storage account: $BACKEND_STORAGE_ACCOUNT"
          if az storage account show -n "$BACKEND_STORAGE_ACCOUNT" -g "$BACKEND_RG" --query "name" -o tsv 2>/dev/null; then
            echo "Storage account already exists"
          else
            az storage account create -n "$BACKEND_STORAGE_ACCOUNT" -g "$BACKEND_RG" -l "$BACKEND_LOCATION" --sku Standard_LRS
          fi
          KEY=$(az storage account keys list -g "$BACKEND_RG" -n "$BACKEND_STORAGE_ACCOUNT" --query '[0].value' -o tsv)
          echo "Creating container if missing: $BACKEND_CONTAINER"
          az storage container create --name "$BACKEND_CONTAINER" --account-name "$BACKEND_STORAGE_ACCOUNT" --account-key "$KEY" || true
          echo "BACKEND_KEY=state.tfstate" >> $GITHUB_ENV


      - name: Select Terraform working directory
        run: echo "TF_WORKING_DIR=${{ env.TF_WORKING_DIR }}" >> $GITHUB_ENV

      - name: Set Azure environment variables for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV

      - name: Terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          if [ -n "${BACKEND_STORAGE_ACCOUNT}" ]; then
            terraform init -input=false -backend-config="resource_group_name=${BACKEND_RG}" -backend-config="storage_account_name=${BACKEND_STORAGE_ACCOUNT}" -backend-config="container_name=${BACKEND_CONTAINER}" -backend-config="key=${BACKEND_KEY}"
          else
            terraform init -input=false
          fi

      - name: Terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate || true

      - name: Terraform plan
        id: tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          # Ensure environment is set, default to dev if empty
          ENV="${{ steps.env-action.outputs.environment }}"
          if [[ -z "$ENV" ]]; then
            ENV="dev"
          fi
          echo "Using environment: $ENV"
          terraform plan -var-file="environments/$ENV/terraform.tfvars.json" -out=tfplan -input=false

      - name: Upload plan (artifact)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.TF_WORKING_DIR }}/tfplan

      - name: Show plan file (create plan.txt)
        if: ${{ always() }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform show -no-color tfplan > plan.txt || true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          ENVIRONMENT: ${{ steps.env-action.outputs.environment }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planPath = process.env.TF_WORKING_DIR + '/plan.txt';
            const planContent = fs.existsSync(planPath) ? fs.readFileSync(planPath, 'utf8') : 'No plan available.';
            const maxLength = 64000;
            const content = planContent.length > maxLength ? planContent.slice(0, maxLength) + '\n\n---\n(Plan truncated)' : planContent;

            const output = '## üöÄ Terraform Plan Results\n\n' +
              '**Environment:** `' + process.env.ENVIRONMENT + '`\n' +
              '**Status:** ‚úÖ Plan generated successfully\n\n' +
              '### üìã Plan Summary\n' +
              '```terraform\n' + content + '\n```\n\n' +
              '### üîç Details\n' +
              '- **Triggered by:** @' + process.env.GITHUB_ACTOR + '\n' +
              '- **Branch:** `' + process.env.GITHUB_HEAD_REF + '`\n' +
              '- **Action:** Plan only (merge to deploy)\n\n' +
              '---\n' +
              '*This plan will be applied when the PR is merged to main/master branch.*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform apply (on push to main/master)
        if: ${{ github.event_name == 'push' && steps.env-action.outputs.action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -var-file=environments/${{ steps.env-action.outputs.environment }}/terraform.tfvars.json -auto-approve tfplan

      - name: Terraform apply (manual)
        if: ${{ github.event_name == 'workflow_dispatch' && steps.env-action.outputs.action == 'apply' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -var-file=environments/${{ steps.env-action.outputs.environment }}/terraform.tfvars.json -auto-approve tfplan

      - name: Terraform destroy
        if: ${{ steps.env-action.outputs.action == 'destroy' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform destroy -var-file=environments/${{ steps.env-action.outputs.environment }}/terraform.tfvars.json -auto-approve
